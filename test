diff --git a/.DS_Store b/.DS_Store
deleted file mode 100644
index f6d9f84..0000000
Binary files a/.DS_Store and /dev/null differ
diff --git a/.gitignore b/.gitignore
index 6fd0a37..2c9cf63 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,3 +1,5 @@
+.DS_Store
+
 # Compiled Lua sources
 luac.out
 
diff --git a/README.md b/README.md
index 665278d..45ca77d 100644
--- a/README.md
+++ b/README.md
@@ -1,21 +1,27 @@
 # todo.nvim
-This plugin helps you manage your to-do list while working in neovim, purely written in lua.
+It helps you manage your to-do list while working in neovim.
+For Mac OS users, you can load your to-do list to Reminder, see [Extension](#extension)
 
 <p align="center">
-    <img src=""  width="40%" height="40%" />
+    <img src="https://user-images.githubusercontent.com/47852787/176720169-eabd0f50-afab-4ff7-82a6-ea18b0b80af8.gif" width="80%" height="80%">
 </p>
 
+## Requirements
+* Neovim 0.7 or higher.
+
 ## Installation
 Using packer
 ```lua
 use { 'ackeraa/todo.nvim' }
 ```
 ## Setup
-This plugin must be explicitly enabled by using `require("todo").setup{}`
-You must pass the `file_path` to specify the where do you want to save of the to-do list. 
+This plugin must be explicitly enabled by using `require("todo").setup{}`.
+Pass the `file_path` to specify the where do you want to save of the to-do list. 
 ```lua
 require("todo").setup {
-    file_path = "path/to/save/todo.txt"
+    opts = {
+        file_path = "path/to/save/todo.txt"
+    },
 }
 ```
 
@@ -41,6 +47,21 @@ Examples:
 
 See [doc](https://github.com/Ackeraa/todo.nvim/blob/main/doc/todo.txt) for more details.
 
+## Extension
+Mac OS users can load the to-do list to Reminder as follows:
+
+* Create a list called "Todo" in your Reminder.
+* Set `upload_to_reminder = true`
+```lua
+    require("todo").setup {
+        opts = {
+            file_path = "path/to/save/todo.txt",
+            upload_to_reminder = true,
+        },
+    }
+```
+**Hint**: Anything you change in your Reminder will not affect your to-do list file.
+
 ## TODO
 * Just finished the job, but the implementation is not elegant.
 * Improve the code structure
diff --git a/doc/tags b/doc/tags
new file mode 100644
index 0000000..70404c4
--- /dev/null
+++ b/doc/tags
@@ -0,0 +1 @@
+todo.nvim	todo.txt	/*todo.nvim*
diff --git a/doc/todo.txt b/doc/todo.txt
index 81da3d9..4a6cd7d 100644
--- a/doc/todo.txt
+++ b/doc/todo.txt
@@ -10,6 +10,9 @@ Getting started with todo:
        to-do list file.
     2. Run `:Todo` to start.
 
+For Mac OS users, you can load your to-do list to Reminder, see
+*todo-extension* for more details.
+
                                                            *todo-requirements*
 This plugin works in Neovim 0.7 or higher.
 
@@ -20,7 +23,9 @@ You must pass the |file_path| to specify the where do you want to save of
 the to-do list. Example: >
 
         require("todo").setup {
-            file_path = "path/to/save/todo.txt"
+            opts = {
+                file_path = "path/to/save/todo.txt"
+            },
         }
 <
                                                                   *todo-usage*
@@ -83,8 +88,20 @@ There are four types of commands can be used in the floating window:
           - pass either {new-to-do} or {new-priority}, but not both
 
                                                               *todo-extension*
+For Mac OS users, you can load your to-do list to Reminder, do as fllows:
 
-
-
+    1. Create a list called "Todo" in your Reminder.
+    2. Setup as fllows:
+        >
+        require("todo").setup {
+            opts = {
+                file_path = "path/to/save/todo.txt",
+                upload_to_reminder = true,
+            },
+        }
+<
+Hints: ~
+    - For now, only supports reminder on Mac
+    - Anything you change in your Reminder will not affect your to-do list file
 
  vim:tw=78:ts=8:ft=help:norl:
diff --git a/lua/tests/adder_spec.lua b/lua/tests/adder_spec.lua
index ca466c2..a942717 100644
--- a/lua/tests/adder_spec.lua
+++ b/lua/tests/adder_spec.lua
@@ -1,6 +1,7 @@
 describe("adder", function()
 
-    local adder = require("todo.adder"):new()
+    local opts = require("todo.config").opts
+    local adder = require("todo.adder"):new(opts)
     describe("parse", function()
         it("can parse add command", function()
             local op, arg1, arg2 = adder:_parse("add 1 hello")
diff --git a/lua/tests/previewer_spec.lua b/lua/tests/previewer_spec.lua
index 5728d8d..ea971b0 100644
--- a/lua/tests/previewer_spec.lua
+++ b/lua/tests/previewer_spec.lua
@@ -1,19 +1,20 @@
 describe("previewer", function()
-    local previewer = require("todo.previewer"):new()
+    local opts = require("todo.config").opts
     local filename = "lua/tests/todo.txt"
-    local config = require("todo.config")
+    opts.file_path = filename
+    local previewer = require("todo.previewer"):new(opts)
     before_each(function()
         local file = io.open(filename, "w")
         if file then
             local lines = {
-                "1. do something",
-                "2. do something else",
-                "3. do something else else",
-                "4. do something else else else",
-                "5. do something else else else else",
-                config.done_caret.."@2016-01-01 done something",
-                config.done_caret.."@2016-01-01 done something else",
-                config.done_caret.."@2016-01-01 done something else else",
+                "do something",
+                "do something else",
+                "do something else else",
+                "do something else else else",
+                "do something else else else else",
+                "@2016-01-01 done something",
+                "@2016-01-01 done something else",
+                "@2016-01-01 done something else else",
             }
             for _, line in ipairs(lines) do
                 file:write(line .. "\n")
@@ -22,100 +23,114 @@ describe("previewer", function()
         end
     end)
 
-    describe("parse", function()
-        it("should parse right", function()
-            local line = previewer:_parse("1. 123 hello")
-            assert.is.not_nil(line)
-            assert.is.equal(1, line.priority)
-            assert.is.equal("123 hello", line.task)
-
-            line = previewer:_parse(config.done_caret.." @2016-01-01 123 hello")
-            assert.is.not_nil(line)
-            assert.is.equal(nil, line.priority)
-            assert.is.equal("123 hello", line.task)
-            assert.is.equal("2016-01-01", line.date)
-        end)
-    end)
-
     describe("file method", function()
         it("can load the todo file", function()
-            previewer:load_file(filename)
+            previewer:load_file()
             assert.is.equal(8, #previewer.lines)
         end)
 
         it("can write the todo file", function()
-            previewer = require("todo.previewer"):new()
-            previewer:load_file(filename)
-            previewer:save_file(filename)
+            previewer = require("todo.previewer"):new(opts)
+            previewer:load_file()
+            previewer:save_file()
             assert.is.equal(8, #previewer.lines)
         end)
     end)
 
     describe("preview method", function()
         it("should add task right", function()
-            previewer = require("todo.previewer"):new()
-            previewer:load_file(filename)
+            previewer = require("todo.previewer"):new(opts)
+            previewer:load_file()
             previewer:preview("add", 1, "task1")
             previewer:preview("add", 3, "task3")
             previewer:preview("add", 5, "task5")
-            assert.is.equal("task1", previewer.lines[1].task)
-            assert.is.equal("task3", previewer.lines[3].task)
-            assert.is.equal("task5", previewer.lines[5].task)
-            assert.is.equal("do something else else else else", previewer.lines[8].task)
+            assert.is.equal("task1", previewer.lines[1])
+            assert.is.equal("task3", previewer.lines[3])
+            assert.is.equal("task5", previewer.lines[5])
+            assert.is.equal("do something else else else else", previewer.lines[8])
             assert.is.equal(11, #previewer.lines)
 
         end)
 
         it("should delete task right", function()
-            previewer = require("todo.previewer"):new()
-            previewer:load_file(filename)
+            previewer = require("todo.previewer"):new(opts)
+            previewer:load_file()
             previewer:preview("delete", 1)
             previewer:preview("delete", 2)
             previewer:preview("delete", 3)
-            assert.is.equal("do something else", previewer.lines[1].task)
-            assert.is.equal(1, previewer.lines[1].priority)
-            assert.is.equal("do something else else else", previewer.lines[2].task)
-            assert.is.equal(2, previewer.lines[2].priority)
-            assert.is_nil(previewer.lines[3].priority)
+            assert.is.equal("do something else", previewer.lines[1])
+            assert.is.equal("do something else else else", previewer.lines[2])
             assert.is.equal(5, #previewer.lines)
         end)
 
         it("should done task right", function()
-            previewer = require("todo.previewer"):new()
-            previewer:load_file(filename)
+            previewer = require("todo.previewer"):new(opts)
+            previewer:load_file()
             previewer:preview("done", 1)
             previewer:preview("done", 1)
             previewer:preview("done", 1)
-            assert.is.equal("do something else else else", previewer.lines[1].task)
-            assert.is.equal(1, previewer.lines[1].priority)
-            assert.is.equal("do something else else else else", previewer.lines[2].task)
-            assert.is.equal(2, previewer.lines[2].priority)
-            assert.is.equal("do something else else", previewer.lines[3].task)
-            assert.is.equal(os.date("%Y-%m-%d"), previewer.lines[3].date)
-            assert.is.equal("do something else", previewer.lines[4].task)
+            assert.is.equal("do something else else else", previewer.lines[1])
+            assert.is.equal("do something else else else else", previewer.lines[2])
+            assert.is.equal("@"..os.date("%Y-%m-%d").." do something else else", previewer.lines[3])
+            assert.is.equal("@2016-01-01 done something", previewer.lines[6])
             assert.is.equal(8, #previewer.lines)
         end)
 
         it("should edit task right", function()
-            previewer = require("todo.previewer"):new()
-            previewer:load_file(filename)
+            previewer = require("todo.previewer"):new(opts)
+            previewer:load_file()
             previewer:preview("edit", 1, "task1")
             previewer:preview("edit", 2, "task2")
-            assert.is.equal("task1", previewer.lines[1].task)
-            assert.is.equal(1, previewer.lines[1].priority)
-            assert.is.equal("task2", previewer.lines[2].task)
-            assert.is.equal(2, previewer.lines[2].priority)
+            assert.is.equal("task1", previewer.lines[1])
+            assert.is.equal("task2", previewer.lines[2])
 
             previewer:preview("edit", 1, "2")
             previewer:preview("edit", 2, "3")
-            assert.is.equal("task2", previewer.lines[1].task)
-            assert.is.equal(1, previewer.lines[1].priority)
-            assert.is.equal("task1", previewer.lines[3].task)
-            assert.is.equal(3, previewer.lines[3].priority)
+            assert.is.equal("task2", previewer.lines[1])
+            assert.is.equal("task1", previewer.lines[3])
             assert.is.equal(8, #previewer.lines)
-
         end)
 
+        it("should all right", function()
+            previewer = require("todo.previewer"):new(opts)
+            previewer:load_file()
+
+            previewer:preview("delete", 5)
+            previewer:preview("delete", 3)
+            previewer:preview("delete", 1)
+            previewer:preview("delete", 2)
+            assert.is.equal(4, #previewer.lines)
+            assert.is.equal("do something else", previewer.lines[1])
+            assert.is.equal("@2016-01-01 done something", previewer.lines[2])
+
+            previewer:preview("delete", 1)
+            previewer:preview("add", 1, "task1")
+            previewer:preview("add", 2, "task2")
+            previewer:preview("add", 3, "task5")
+            previewer:preview("add", 3, "task3")
+            previewer:preview("add", 4, "task4")
+            assert.is.equal(8, #previewer.lines)
+            for i = 1, 5 do
+                assert.is.equal("task"..i, previewer.lines[i])
+            end
+
+            previewer:preview("edit", 1, 2)
+            previewer:preview("edit", 2, 3)
+            previewer:preview("edit", 3, 4)
+            previewer:preview("edit", 4, 5)
+            previewer:preview("edit", 5, 1)
+            for i = 1, 5 do
+                assert.is.equal("task"..i, previewer.lines[i])
+            end
+
+            previewer:preview("done", 3)
+            previewer:preview("done", 1)
+            previewer:preview("done", 3)
+            previewer:preview("done", 1)
+            previewer:preview("done", 1)
+
+            assert.is.equal("@"..os.date("%Y-%m-%d").." task4", previewer.lines[1])
+        end)
     end)
 
 end)
diff --git a/lua/tests/todo.txt b/lua/tests/todo.txt
index fe1c7b3..915d303 100644
--- a/lua/tests/todo.txt
+++ b/lua/tests/todo.txt
@@ -1,8 +1,8 @@
-1. do something
-2. do something else
-3. do something else else
-4. do something else else else
-5. do something else else else else
- @2016-01-01 done something
- @2016-01-01 done something else
- @2016-01-01 done something else else
+do something
+do something else
+do something else else
+do something else else else
+do something else else else else
+@2016-01-01 done something
+@2016-01-01 done something else
+@2016-01-01 done something else else
diff --git a/lua/todo/adder.lua b/lua/todo/adder.lua
index f825426..026c705 100644
--- a/lua/todo/adder.lua
+++ b/lua/todo/adder.lua
@@ -1,10 +1,10 @@
 local utils = require("todo.utils")
-local config = require("todo.config")
 
 local Adder = {}
 
-function Adder:new()
+function Adder:new(opts)
     self.__index = self
+    self.opts = opts
     local title_win_id = self:_create_title_window()
     local prefix_win_id = self:_create_prefix_window()
     local main_win_id = self:_create_main_window()
@@ -37,8 +37,8 @@ function Adder:_create_main_window()
     local border = { "╭", "─", "╮", "│", "┤", "─", "├", "│" }
 
     local _, win_id = utils.create_bufwin(
-            config.width, config.adder_height,
-            config.row, config.col, border, 1
+            self.opts.width, self.opts.adder_height,
+            self.opts.row, self.opts.col, border, 1
         )
 
     vim.api.nvim_win_set_option(win_id, "winhighlight", "NormalFloat:Normal,FloatBorder:Constant")
@@ -48,8 +48,8 @@ end
 
 function Adder:_create_input_window()
     local buf, win_id = utils.create_bufwin(
-            config.width - #config.prompt_prefix, config.adder_height,
-            config.row + 1, config.col + #config.prompt_prefix, "none", 2
+            self.opts.width - #self.opts.prompt_prefix, self.opts.adder_height,
+            self.opts.row + 1, self.opts.col + #self.opts.prompt_prefix, "none", 2
         )
 
     vim.api.nvim_win_set_option(win_id, "winhighlight", "NormalFloat:Normal")
@@ -59,12 +59,12 @@ end
 
 function Adder:_create_title_window()
     local buf, win_id = utils.create_bufwin(
-            #config.title, 1, config.row,
-            config.col + math.ceil((config.width - #config.title) / 2),
+            #self.opts.title, 1, self.opts.row,
+            self.opts.col + math.ceil((self.opts.width - #self.opts.title) / 2),
             "none", 2
         )
 
-    vim.api.nvim_buf_set_lines(buf, 0, -1, true, { config.title })
+    vim.api.nvim_buf_set_lines(buf, 0, -1, true, { self.opts.title })
     vim.api.nvim_buf_add_highlight(buf, -1, "TodoTitle", 0, 0, -1)
     vim.api.nvim_win_set_config(win_id, { focusable = false })
     vim.api.nvim_win_set_option(win_id, "winhighlight", "NormalFloat:Normal")
@@ -74,11 +74,11 @@ end
 
 function Adder:_create_prefix_window()
     local buf, win_id = utils.create_bufwin(
-            #config.prompt_prefix, 1, config.row + 1,
-            config.col + 1, "none", 2
+            #self.opts.prompt_prefix, 1, self.opts.row + 1,
+            self.opts.col + 1, "none", 2
         )
 
-    vim.api.nvim_buf_set_lines(buf, 0, -1, true, { config.prompt_prefix })
+    vim.api.nvim_buf_set_lines(buf, 0, -1, true, { self.opts.prompt_prefix })
     vim.api.nvim_buf_add_highlight(buf, -1, "TodoPrompt", 0, 0, -1)
     vim.api.nvim_win_set_config(win_id, { focusable = false })
     vim.api.nvim_win_set_option(win_id, "winhighlight", "NormalFloat:Normal")
diff --git a/lua/todo/config.lua b/lua/todo/config.lua
index d6f8fe3..f868097 100644
--- a/lua/todo/config.lua
+++ b/lua/todo/config.lua
@@ -5,15 +5,18 @@ local config = {}
 local width = vim.api.nvim_get_option("columns")
 local height = vim.api.nvim_get_option("lines")
 
-config.title = " TODO "
-config.prompt_prefix = " "
-config.done_caret = " "
-config.file_path = "lua/todo/todo.txt"
-config.adder_height = 1
-config.previewer_height = math.ceil(height * 0.3)
-config.width = math.ceil(width * 0.5)
-config.row = math.ceil((height - config.adder_height - config.previewer_height) / 2) - 1
-config.col = math.ceil((width - config.width) / 2)
+config.opts = {
+    title = " TODO ",
+    prompt_prefix = " ",
+    done_caret = " ",
+    upload_to_reminder = false,
+    adder_height = 1,
+    previewer_height = math.ceil(height * 0.3),
+    width = math.ceil(width * 0.5),
+    row = math.ceil((height * 0.7 - 1) / 2) - 1,
+    col = math.ceil((width * 0.5) / 2),
+    file_path = 1,
+}
 
 config.highlights = {
     TodoTitle = { default = true, link = "Title" },
@@ -27,16 +30,19 @@ config.highlights = {
     TodoDate = { default = true, link = "Comment" },
 }
 
-config.setup = function(opts)
-    --[[ if opts.file_path == nil then
+config.setup = function(custom_config)
+    if custom_config.opts == nil or custom_config.opts.file_path == nil then
         log.error("Todo file path is not specified")
         return nil
-    end ]]
-    config = vim.tbl_deep_extend("force", config, opts)
+    end
+
+    config = vim.tbl_deep_extend("force", config, custom_config)
 
     for k, v in pairs(config.highlights) do
       vim.api.nvim_set_hl(0, k, v)
     end
+
+    return config
 end
 
 return config
diff --git a/lua/todo/extensions/reminder/init.lua b/lua/todo/extensions/reminder/init.lua
new file mode 100644
index 0000000..2a845a9
--- /dev/null
+++ b/lua/todo/extensions/reminder/init.lua
@@ -0,0 +1,20 @@
+local reminder = {}
+
+reminder.script_path = function()
+   local str = debug.getinfo(2, "S").source:sub(2)
+   return str:match("(.*/)")
+end
+
+-- do not use this, because it's pretty slow.
+reminder.read_from_reminder = function(file_path)
+    local script = reminder.script_path.."read_from_reminder.scpt "
+    io.popen("osascript "..script..file_path)
+end
+
+reminder.write_to_reminder = function(file_path)
+    local script = reminder.script_path().."write_to_reminder.scpt "
+    io.popen("osascript "..script..file_path)
+end
+
+return reminder
+
diff --git a/lua/todo/extensions/reminder/read_from_reminder.scpt b/lua/todo/extensions/reminder/read_from_reminder.scpt
new file mode 100644
index 0000000..53b5e54
--- /dev/null
+++ b/lua/todo/extensions/reminder/read_from_reminder.scpt
@@ -0,0 +1,15 @@
+# Has not been used yet.
+on run argv
+    set file_path to item 1 of argv
+    set todoFile to open for access file_path with write permission
+    set todoList to "Todo"
+
+    tell application "Reminders"
+        set tasks to reminders of list todoList
+        repeat with task in tasks
+            write (name of task as string) & "\n" to todoFile
+        end repeat
+    end tell
+
+    close access todoFile
+end run
diff --git a/lua/todo/extensions/reminder/write_to_reminder.scpt b/lua/todo/extensions/reminder/write_to_reminder.scpt
new file mode 100644
index 0000000..d502a11
--- /dev/null
+++ b/lua/todo/extensions/reminder/write_to_reminder.scpt
@@ -0,0 +1,23 @@
+on run argv
+    set file_path to item 1 of argv
+    set tasks to paragraphs of (read POSIX file file_path)
+    set todoList to "Todo"
+
+    tell application "Reminders"
+        tell list todoList
+            delete every reminder
+        end tell
+    end tell
+
+    repeat with task in tasks
+        tell application "Reminders"
+            tell list todoList 
+                if task starts with "@" then 
+                    exit repeat
+                else
+                    make new reminder at end with properties {name:task}
+                end if
+            end tell
+        end tell
+    end repeat
+end run
diff --git a/lua/todo/init.lua b/lua/todo/init.lua
index 55cb388..9a893c2 100644
--- a/lua/todo/init.lua
+++ b/lua/todo/init.lua
@@ -4,21 +4,23 @@ local M = {}
 function M.open()
 
     -- for debug purpose
-    RELOAD("todo.adder")
+    --[[ RELOAD("todo.adder")
     RELOAD("todo.previewer")
     RELOAD("todo.window")
     RELOAD("todo.utils")
-    RELOAD("todo.config")
-    if M.window == nil or M.window.adder == nil then
-        M.setup()
-        M.window = require("todo.window"):new()
+    RELOAD("todo.config") ]]
+    if M.opts and (M.window == nil or M.window.adder == nil) then
+        M.window = require("todo.window"):new(M.opts)
         M.window:setup()
     end
 end
 
-function M.setup(opts)
-    opts = opts or {}
-    require("todo.config").setup(opts)
+function M.setup(custom_config)
+    local config = require("todo.config").setup(custom_config)
+    if config == nil then
+        return
+    end
+    M.opts = config.opts
 end
 
 return M
diff --git a/lua/todo/previewer.lua b/lua/todo/previewer.lua
index 4d840e8..320c1e1 100644
--- a/lua/todo/previewer.lua
+++ b/lua/todo/previewer.lua
@@ -1,14 +1,15 @@
 local log = require("todo.log")
 local utils = require("todo.utils")
-local config = require("todo.config")
 
 local Previewer = {}
 
-function Previewer:new()
+function Previewer:new(opts)
+    self.__index = self
+    self.opts = opts
     local border = { "├", "─", "┤", "│", "╯", "─", "╰", "│" }
     local buf, win_id = utils.create_bufwin(
-            config.width, config.previewer_height,
-            config.row + 2, config.col, border, 1
+            opts.width, opts.previewer_height,
+            opts.row + 2, opts.col, border, 1
         )
 
     vim.api.nvim_win_set_option(win_id, "cursorline", true)
@@ -21,14 +22,12 @@ function Previewer:new()
         lines = {},
         todos = 0,
     }
-    self.__index = self
-
     return setmetatable(previewer, self)
 end
 
 function Previewer:add_highlight()
     vim.fn.matchadd("TodoPriority", "^\\d\\+\\.")
-    vim.fn.matchadd("TodoDone", "^"..config.done_caret)
+    vim.fn.matchadd("TodoDone", "^"..self.opts.done_caret)
     vim.fn.matchadd("TodoDate", "@\\d\\+-\\d\\+-\\d\\+")
 end
 
@@ -60,24 +59,14 @@ function Previewer:_add(priority, task)
         log.error("Task priority is too high")
         return
     end
-    -- shift dones
-    for i = #self.lines, self.todos + 1, -1 do
-        self.lines[i + 1] = self.lines[i]
-    end
 
-    -- shift todos after priority
-    for i = self.todos, priority, -1 do
-        self.lines[i + 1] = {
-            priority = self.lines[i].priority + 1,
-            task = self.lines[i].task
-        }
+    -- shift
+    for i = #self.lines, priority, -1 do
+        self.lines[i + 1] = self.lines[i]
     end
 
     -- add new task
-    self.lines[priority] = {
-        priority = priority,
-        task = task
-    }
+    self.lines[priority] = task
     self.todos = self.todos + 1
 end
 
@@ -87,13 +76,8 @@ function Previewer:_delete(priority)
         return
     end
 
-    -- shift todos
-    for i = priority, self.todos - 1 do
-        self.lines[i].task = self.lines[i + 1].task
-    end
-
-    -- shift dones
-    for i = self.todos, #self.lines - 1 do
+    -- shift
+    for i = priority, #self.lines - 1 do
         self.lines[i] = self.lines[i + 1]
     end
 
@@ -108,18 +92,15 @@ function Previewer:_done(priority)
         return
     end
 
-    local done = self.lines[priority].task
+    local task = self.lines[priority]
 
-    -- shift todos
+    -- shift
     for i = priority, self.todos - 1 do
-        self.lines[i].task = self.lines[i + 1].task
+        self.lines[i] = self.lines[i + 1]
     end
 
     -- done the task
-    self.lines[self.todos] = {
-        date = os.date("%Y-%m-%d"),
-        task = done,
-    }
+    self.lines[self.todos] = "@"..os.date("%Y-%m-%d").. " "..task
     self.todos = self.todos - 1
 end
 
@@ -135,20 +116,19 @@ function Previewer:_edit(priority, task_or_priority)
             log.error("Task priority is too high")
         end
 
-        local task = self.lines[priority].task
+        local task = self.lines[priority]
         self:_delete(priority)
         self:_add(num, task)
     else
-        self.lines[priority].task = task_or_priority
+        self.lines[priority] = task_or_priority
     end
 end
 
 function Previewer:load_file()
-    local file = io.open(config.file_path, "r")
+    local file = io.open(self.opts.file_path, "r")
     if file then
         for line in file:lines() do
-            line = self:_parse(line)
-            if line.priority  then
+            if line:sub(1, 1) ~= "@"  then
                 self.todos = self.todos + 1
             end
             table.insert(self.lines, line)
@@ -159,44 +139,27 @@ function Previewer:load_file()
 end
 
 function Previewer:save_file()
-    local file = io.open(config.file_path, "w")
+    local file = io.open(self.opts.file_path, "w")
     if file then
-        local lines = self:_repr()
-        for _, line in ipairs(lines) do
+        for _, line in ipairs(self.lines) do
             file:write(line .. "\n")
         end
         file:close()
     else
-        log.error("Failed to open file: ", config.file_path)
-    end
-end
-
-function Previewer:_parse(line)
-    local priority = line:match("^(%d+)")
-    if priority then
-        return {
-            priority = tonumber(priority),
-            task = line:sub(#priority + 3)
-        }
-    else
-        local date = line:match("@(%d+-%d+-%d+)")
-        local task = line:match("@%d+-%d+-%d+%s+(.+)$")
-        return {
-            date = date,
-            task = task
-        }
+        log.error("Failed to open file: ", self.opts.file_path)
     end
 end
 
 function Previewer:_repr()
     local lines = {}
-    for _, line in ipairs(self.lines) do
-        if line.priority then
-            table.insert(lines, line.priority .. ". " .. line.task)
+    for i, line in ipairs(self.lines) do
+        if line:sub(1, 1) ~= "@" then
+            table.insert(lines, i .. ". " .. line)
         else
-            table.insert(lines, config.done_caret.." @"..line.date.." "..line.task)
+            table.insert(lines, self.opts.done_caret..line)
         end
     end
+
     return lines
 end
 
@@ -207,6 +170,10 @@ end
 
 function Previewer:close()
     vim.api.nvim_win_close(self.win_id, true)
+    if self.opts.upload_to_reminder then
+        local reminder = require("todo.extensions.reminder")
+        reminder.write_to_reminder(self.opts.file_path)
+    end
 end
 
 return Previewer
diff --git a/lua/todo/todo.txt b/lua/todo/todo.txt
deleted file mode 100644
index 3880463..0000000
--- a/lua/todo/todo.txt
+++ /dev/null
@@ -1,2 +0,0 @@
-  @2022-06-30 do another thing
-  @2022-06-30 do new one thing
diff --git a/lua/todo/window.lua b/lua/todo/window.lua
index 0350de6..c892e41 100644
--- a/lua/todo/window.lua
+++ b/lua/todo/window.lua
@@ -3,9 +3,9 @@ local Previewer = require("todo.previewer")
 
 local Window = {}
 
-function Window:new()
-    local previewer = Previewer:new()
-    local adder = Adder:new()
+function Window:new(opts)
+    local previewer = Previewer:new(opts)
+    local adder = Adder:new(opts)
 
     local window = {
         adder = adder,
@@ -18,7 +18,7 @@ end
 function Window:setup()
     -- TODO: ugly implementation, need to be improved
     self:switch_window("previewer")
-    self.previewer.add_highlight()
+    self.previewer:add_highlight()
     self:switch_window("adder")
     self.adder.add_highlight()
